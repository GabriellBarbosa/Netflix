[{"C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\index.js":"1","C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\api.js":"2","C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\components\\Loading.tsx":"3","C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\components\\Footer.tsx":"4","C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\components\\Header.tsx":"5","C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\components\\FeaturedMovieInfo.tsx":"6","C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\components\\MovieList.tsx":"7","C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\components\\Home.tsx":"8","C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\components\\Movie.tsx":"9","C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\GlobalContext.tsx":"10","C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\components\\MovieModal.tsx":"11","C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\App.tsx":"12"},{"size":209,"mtime":1683896979654,"results":"13","hashOfConfig":"14"},{"size":2388,"mtime":1683896979639,"results":"15","hashOfConfig":"14"},{"size":631,"mtime":1683901786687,"results":"16","hashOfConfig":"14"},{"size":812,"mtime":1683910373798,"results":"17","hashOfConfig":"14"},{"size":2313,"mtime":1683910904393,"results":"18","hashOfConfig":"14"},{"size":2486,"mtime":1684170388081,"results":"19","hashOfConfig":"14"},{"size":3050,"mtime":1684174011429,"results":"20","hashOfConfig":"14"},{"size":473,"mtime":1684155914445,"results":"21","hashOfConfig":"14"},{"size":2788,"mtime":1684155913185,"results":"22","hashOfConfig":"14"},{"size":1001,"mtime":1684170224892,"results":"23","hashOfConfig":"14"},{"size":3897,"mtime":1684174487444,"results":"24","hashOfConfig":"14"},{"size":1869,"mtime":1684182388113,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"14nsirf",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"33"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\index.js",[],["54","55"],"C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\api.js",[],"C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\components\\Loading.tsx",[],["56","57"],"C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\components\\Footer.tsx",[],"C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\components\\Header.tsx",[],"C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\components\\FeaturedMovieInfo.tsx",[],"C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\components\\MovieList.tsx",[],["58","59"],"C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\components\\Home.tsx",[],"C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\components\\Movie.tsx",["60"],"import React from 'react'\r\nimport MovieList, { Result } from './MovieList';\r\nimport styles from './Movie.module.css';\r\nimport leftArrow from '../assets/left-arrow.svg'\r\nimport RightArrow from '../assets/right-arrow.svg'\r\nimport { Item } from './Home';\r\n\r\nconst Movie= ({ item }: { item: Item }) => {\r\n  const movieList = React.useRef<HTMLDivElement>(null);\r\n\r\n  // Pega o valor do translateX da lista de filmes. Se não\r\n  // tiver translateX definido o translateX recebe 0\r\n  const scrollConfig = () => {\r\n    const element = movieList.current;\r\n    if (element) {\r\n      const halfScreenWidth = window.innerWidth / 2;\r\n      const style = window.getComputedStyle(element);\r\n      const matrix = style.transform;\r\n      const translateX = matrix.replace('matrix', '').replace('(', '').replace(')', '').split(', ')[4] || 0;\r\n      return {\r\n        element, \r\n        halfScreenWidth, \r\n        translateX\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  const scrollLeft = () => {\r\n    const scroll = scrollConfig();\r\n    if (scroll) {\r\n      const { element, halfScreenWidth, translateX } = scroll;\r\n      // se o valor do movimento for maior do que 0\r\n      // a lista não irá mais para a esquerda\r\n      let slide = (halfScreenWidth + Number(translateX)) > 0 \r\n        ? 0 \r\n        : (halfScreenWidth + Number(translateX));\r\n      element.style.transform = `translateX(${slide}px)`\r\n    }\r\n  }\r\n\r\n  const scrollRight = () => {\r\n    const scroll = scrollConfig();\r\n    if (scroll) {\r\n      const listWidth = item.items.response.results.length * 302 - window.innerWidth + 60;\r\n      const { element, halfScreenWidth, translateX } = scroll;\r\n      // se o valor do movimento + o translateX for maior do que\r\n      // que a largura do lista, a lista não irá mais para a direita\r\n      let slide = -(halfScreenWidth - Number(translateX)) < -listWidth \r\n        ? -listWidth \r\n        : -(halfScreenWidth - Number(translateX));\r\n      element.style.transform = `translate3d(${slide}px, 0, 0)`;\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <section className={`${styles.movieSection} containerMovies`}>\r\n      <p className={styles.sectionTitle}>{item.title}</p>\r\n      <button className={styles.slideBtn__left} onClick={scrollLeft}>\r\n        <img className={styles.arrowLeft_img} src={leftArrow} alt=\"arrow to left\" />\r\n      </button>\r\n      <button className={styles.slideBtn__right} onClick={scrollRight}>\r\n        <img className={styles.arrowRight_img} src={RightArrow} alt=\"arrow to right\" />\r\n      </button>\r\n      <div ref={movieList} className={styles.movieList}>\r\n        {item.items.response.results.map((result) => (\r\n          <MovieList key={result.id} result={result} type={item.type} />\r\n        ))}        \r\n      </div>\r\n\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Movie\r\n","C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\GlobalContext.tsx",[],"C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\components\\MovieModal.tsx",[],"C:\\Users\\Gabigol\\Desktop\\personal\\netflix-parent\\netflix\\src\\App.tsx",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"61","replacedBy":"65"},{"ruleId":"63","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":2,"column":21,"nodeType":"69","messageId":"70","endLine":2,"endColumn":27},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],["71"],["72"],"@typescript-eslint/no-unused-vars","'Result' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]